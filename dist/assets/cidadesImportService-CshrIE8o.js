import{B as g,c as l}from"./index-GRtTAizn.js";class v extends g{constructor(){super(...arguments),this.config={entityType:"cidades",requiredFields:["nome","estado"],optionalFields:["regiao","distancia","pesoMinimo","observacao"],validationRules:[{field:"nome",rule:"required",message:"Nome da cidade é obrigatório"},{field:"estado",rule:"required",message:"Estado é obrigatório"},{field:"nome",rule:"unique",message:"Cidade já cadastrada"},{field:"distancia",rule:"number",message:"Distância deve ser um número"},{field:"pesoMinimo",rule:"number",message:"Peso mínimo deve ser um número"}],transformations:[{field:"nome",transform:"uppercase"},{field:"estado",transform:"uppercase"},{field:"regiao",transform:"lowercase"},{field:"distancia",transform:"cleanNumeric"},{field:"pesoMinimo",transform:"cleanNumeric"}],templateConfig:{headers:["Nome*","Estado*","Região","Distância (km)","Peso Mínimo (kg)","Observação"],exampleData:[["SÃO PAULO","SP","sudeste","0","1000","Capital do estado"],["RIO DE JANEIRO","RJ","sudeste","430","500","Cidade maravilhosa"],["BELO HORIZONTE","MG","sudeste","586","800","Capital de Minas"]],instructions:["Nome: Nome da cidade (será convertido para maiúsculas)","Estado: Sigla do estado (será convertido para maiúsculas)","Região: Região geográfica (opcional, será convertido para minúsculas)","Distância: Distância em km da sede (opcional, apenas números)","Peso Mínimo: Peso mínimo em kg para entrega (opcional, apenas números)","Observação: Observações adicionais (opcional)"],validations:["Nome e Estado são obrigatórios","Nome da cidade deve ser único no sistema","Distância e Peso Mínimo devem ser números válidos","Estado deve ser uma sigla válida (SP, RJ, MG, etc.)"]}}}normalizeCityName(s){return s.normalize("NFD").replace(/[\u0300-\u036f]/g,"").replace(/[^\w\s]/g,"").replace(/\s+/g," ").trim().toUpperCase()}async validateData(s){const e=[],o=[];try{const r=await l.listar(),t=new Set(r.map(i=>`${this.normalizeCityName(i.nome)}-${i.estado.toUpperCase()}`));return s.forEach((i,n)=>{var d,c;const a=n+2;if((d=i[0])!=null&&d.toString().trim()||e.push({row:a,field:"Nome",message:"Nome da cidade é obrigatório"}),(c=i[1])!=null&&c.toString().trim()||e.push({row:a,field:"Estado",message:"Estado é obrigatório"}),i[0]&&i[1]){const u=`${this.normalizeCityName(i[0].toString())}-${i[1].toString().toUpperCase()}`;t.has(u)&&e.push({row:a,field:"Nome",message:`Cidade "${i[0].toString().trim()}" já cadastrada no sistema`})}if(i[3]!==void 0&&i[3]!==null&&i[3]!==""){const m=Number(i[3]);(isNaN(m)||m<0)&&e.push({row:a,field:"Distância",message:"Distância deve ser um número válido"})}if(i[4]!==void 0&&i[4]!==null&&i[4]!==""){const m=Number(i[4]);(isNaN(m)||m<0)&&e.push({row:a,field:"Peso Mínimo",message:"Peso mínimo deve ser um número válido"})}}),{isValid:e.length===0,errors:e,warnings:o}}catch{return s.forEach((t,i)=>{var a,d;const n=i+2;(a=t[0])!=null&&a.toString().trim()||e.push({row:n,field:"Nome",message:"Nome da cidade é obrigatório"}),(d=t[1])!=null&&d.toString().trim()||e.push({row:n,field:"Estado",message:"Estado é obrigatório"})}),{isValid:e.length===0,errors:e,warnings:o}}}async transformData(s){return s.map((e,o)=>{var r,t,i,n;try{const a={nome:((r=e[0])==null?void 0:r.toString().trim().toUpperCase())||"",estado:((t=e[1])==null?void 0:t.toString().trim().toUpperCase())||""};return(i=e[2])!=null&&i.toString().trim()&&(a.regiao=e[2].toString().trim().toUpperCase()),e[3]!==void 0&&e[3]!==null&&e[3]!==""&&(a.distancia=Number(e[3])),e[4]!==void 0&&e[4]!==null&&e[4]!==""&&(a.pesoMinimo=Number(e[4])),(n=e[5])!=null&&n.toString().trim()&&(a.observacao=e[5].toString().trim().toUpperCase()),a}catch(a){throw new Error(`Erro ao processar linha ${o+1}: ${a.message}`)}})}async saveToDatabase(s){const e={success:!0,totalRows:s.length,importedRows:0,failedRows:0,errors:[],warnings:[],duration:0};for(let o=0;o<s.length;o++)try{const r=s[o];await l.criar(r),e.importedRows++}catch(r){e.failedRows++,e.errors.push({row:o+2,field:"geral",message:`Erro ao salvar cidade: ${r.message}`,value:s[o],severity:"error"})}return e.success=e.failedRows===0,e}}export{v as CidadesImportService};
//# sourceMappingURL=cidadesImportService-CshrIE8o.js.map
