{"version":3,"file":"cidadesImportService-CshrIE8o.js","sources":["../../src/components/import/data/cidadesImportService.ts"],"sourcesContent":["import { BaseImportService } from \"./importService\";\nimport { cidadesService } from \"../../cidades/data/cidadesService\";\nimport type {\n  ImportConfig,\n  ValidationResult,\n  ImportResult,\n} from \"../types/importTypes\";\nimport type { CidadeInput } from \"../../cidades/types\";\n\nexport class CidadesImportService extends BaseImportService {\n  // Função para normalizar nomes de cidades (remover acentos e caracteres especiais)\n  private normalizeCityName(name: string): string {\n    return name\n      .normalize(\"NFD\") // Decompor caracteres acentuados\n      .replace(/[\\u0300-\\u036f]/g, \"\") // Remover diacríticos (acentos)\n      .replace(/[^\\w\\s]/g, \"\") // Remover pontuação e caracteres especiais\n      .replace(/\\s+/g, \" \") // Normalizar espaços\n      .trim()\n      .toUpperCase();\n  }\n  protected config: ImportConfig = {\n    entityType: \"cidades\",\n    requiredFields: [\"nome\", \"estado\"],\n    optionalFields: [\"regiao\", \"distancia\", \"pesoMinimo\", \"observacao\"],\n    validationRules: [\n      {\n        field: \"nome\",\n        rule: \"required\",\n        message: \"Nome da cidade é obrigatório\",\n      },\n      { field: \"estado\", rule: \"required\", message: \"Estado é obrigatório\" },\n      { field: \"nome\", rule: \"unique\", message: \"Cidade já cadastrada\" },\n      {\n        field: \"distancia\",\n        rule: \"number\",\n        message: \"Distância deve ser um número\",\n      },\n      {\n        field: \"pesoMinimo\",\n        rule: \"number\",\n        message: \"Peso mínimo deve ser um número\",\n      },\n    ],\n    transformations: [\n      { field: \"nome\", transform: \"uppercase\" },\n      { field: \"estado\", transform: \"uppercase\" },\n      { field: \"regiao\", transform: \"lowercase\" },\n      { field: \"distancia\", transform: \"cleanNumeric\" },\n      { field: \"pesoMinimo\", transform: \"cleanNumeric\" },\n    ],\n    templateConfig: {\n      headers: [\n        \"Nome*\",\n        \"Estado*\",\n        \"Região\",\n        \"Distância (km)\",\n        \"Peso Mínimo (kg)\",\n        \"Observação\",\n      ],\n      exampleData: [\n        [\"SÃO PAULO\", \"SP\", \"sudeste\", \"0\", \"1000\", \"Capital do estado\"],\n        [\"RIO DE JANEIRO\", \"RJ\", \"sudeste\", \"430\", \"500\", \"Cidade maravilhosa\"],\n        [\"BELO HORIZONTE\", \"MG\", \"sudeste\", \"586\", \"800\", \"Capital de Minas\"],\n      ],\n      instructions: [\n        \"Nome: Nome da cidade (será convertido para maiúsculas)\",\n        \"Estado: Sigla do estado (será convertido para maiúsculas)\",\n        \"Região: Região geográfica (opcional, será convertido para minúsculas)\",\n        \"Distância: Distância em km da sede (opcional, apenas números)\",\n        \"Peso Mínimo: Peso mínimo em kg para entrega (opcional, apenas números)\",\n        \"Observação: Observações adicionais (opcional)\",\n      ],\n      validations: [\n        \"Nome e Estado são obrigatórios\",\n        \"Nome da cidade deve ser único no sistema\",\n        \"Distância e Peso Mínimo devem ser números válidos\",\n        \"Estado deve ser uma sigla válida (SP, RJ, MG, etc.)\",\n      ],\n    },\n  };\n\n  protected async validateData(data: any[]): Promise<ValidationResult> {\n    const errors: any[] = [];\n    const warnings: any[] = [];\n\n    try {\n      // Buscar cidades existentes para validação de unicidade\n      const cidadesExistentes = await cidadesService.listar();\n      const nomesExistentes = new Set(\n        cidadesExistentes.map(\n          (cidade) =>\n            `${this.normalizeCityName(cidade.nome)}-${cidade.estado.toUpperCase()}`,\n        ),\n      );\n\n      // Validar cada linha\n      data.forEach((row, index) => {\n        const rowNumber = index + 2; // +2 porque a primeira linha é cabeçalho\n\n        // Validação de campos obrigatórios\n        if (!row[0]?.toString().trim()) {\n          errors.push({\n            row: rowNumber,\n            field: \"Nome\",\n            message: \"Nome da cidade é obrigatório\",\n          });\n        }\n\n        if (!row[1]?.toString().trim()) {\n          errors.push({\n            row: rowNumber,\n            field: \"Estado\",\n            message: \"Estado é obrigatório\",\n          });\n        }\n\n        // Validação de unicidade\n        if (row[0] && row[1]) {\n          const nomeNormalizado = this.normalizeCityName(row[0].toString());\n          const nomeEstado = `${nomeNormalizado}-${row[1].toString().toUpperCase()}`;\n          if (nomesExistentes.has(nomeEstado)) {\n            errors.push({\n              row: rowNumber,\n              field: \"Nome\",\n              message: `Cidade \"${row[0].toString().trim()}\" já cadastrada no sistema`,\n            });\n          }\n        }\n\n        // Validação de campos numéricos\n        if (row[3] !== undefined && row[3] !== null && row[3] !== \"\") {\n          const distancia = Number(row[3]);\n          if (isNaN(distancia) || distancia < 0) {\n            errors.push({\n              row: rowNumber,\n              field: \"Distância\",\n              message: \"Distância deve ser um número válido\",\n            });\n          }\n        }\n\n        if (row[4] !== undefined && row[4] !== null && row[4] !== \"\") {\n          const pesoMinimo = Number(row[4]);\n          if (isNaN(pesoMinimo) || pesoMinimo < 0) {\n            errors.push({\n              row: rowNumber,\n              field: \"Peso Mínimo\",\n              message: \"Peso mínimo deve ser um número válido\",\n            });\n          }\n        }\n      });\n\n      return {\n        isValid: errors.length === 0,\n        errors,\n        warnings,\n      };\n    } catch (error) {\n      // Se houver erro ao buscar cidades existentes, retornar apenas validação básica\n      data.forEach((row, index) => {\n        const rowNumber = index + 2;\n\n        if (!row[0]?.toString().trim()) {\n          errors.push({\n            row: rowNumber,\n            field: \"Nome\",\n            message: \"Nome da cidade é obrigatório\",\n          });\n        }\n\n        if (!row[1]?.toString().trim()) {\n          errors.push({\n            row: rowNumber,\n            field: \"Estado\",\n            message: \"Estado é obrigatório\",\n          });\n        }\n      });\n\n      return {\n        isValid: errors.length === 0,\n        errors,\n        warnings,\n      };\n    }\n  }\n\n  protected async transformData(data: any[]): Promise<CidadeInput[]> {\n    return data.map((row, index) => {\n      try {\n        const cidade: CidadeInput = {\n          nome: row[0]?.toString().trim().toUpperCase() || \"\",\n          estado: row[1]?.toString().trim().toUpperCase() || \"\",\n        };\n\n        // Adicionar campos opcionais apenas se tiverem valor\n        if (row[2]?.toString().trim()) {\n          cidade.regiao = row[2].toString().trim().toUpperCase();\n        }\n\n        if (row[3] !== undefined && row[3] !== null && row[3] !== \"\") {\n          cidade.distancia = Number(row[3]);\n        }\n\n        if (row[4] !== undefined && row[4] !== null && row[4] !== \"\") {\n          cidade.pesoMinimo = Number(row[4]);\n        }\n\n        if (row[5]?.toString().trim()) {\n          cidade.observacao = row[5].toString().trim().toUpperCase();\n        }\n\n        return cidade;\n      } catch (error) {\n        throw new Error(\n          `Erro ao processar linha ${index + 1}: ${error.message}`,\n        );\n      }\n    });\n  }\n\n  protected async saveToDatabase(data: CidadeInput[]): Promise<ImportResult> {\n    const result: ImportResult = {\n      success: true,\n      totalRows: data.length,\n      importedRows: 0,\n      failedRows: 0,\n      errors: [],\n      warnings: [],\n      duration: 0,\n    };\n\n    for (let i = 0; i < data.length; i++) {\n      try {\n        const cidade = data[i];\n        await cidadesService.criar(cidade);\n        result.importedRows++;\n      } catch (error) {\n        result.failedRows++;\n        result.errors.push({\n          row: i + 2,\n          field: \"geral\",\n          message: `Erro ao salvar cidade: ${error.message}`,\n          value: data[i],\n          severity: \"error\",\n        });\n      }\n    }\n\n    result.success = result.failedRows === 0;\n    return result;\n  }\n}\n"],"names":["CidadesImportService","BaseImportService","name","data","errors","warnings","cidadesExistentes","cidadesService","nomesExistentes","cidade","row","index","rowNumber","_a","_b","nomeEstado","distancia","pesoMinimo","_c","_d","error","result","i"],"mappings":"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"}