import{B as T,f as M}from"./index-GRtTAizn.js";class O extends T{constructor(){super(...arguments),this.config={entityType:"funcionarios",requiredFields:["nome","cpf","cnh","celular","cep","endereco","cidade"],optionalFields:["email","numero","complemento","funcao","cnhVencimento","cnhCategoria","toxicoUltimoExame","toxicoVencimento","dataAdmissao","salario","observacao","status","tipoContrato","unidadeNegocio"],validationRules:[{field:"cpf",rule:"cpf",message:"CPF inválido"},{field:"cnh",rule:"required",message:"CNH obrigatória"},{field:"celular",rule:"phone",message:"Celular inválido"},{field:"email",rule:"email",message:"Email inválido"},{field:"cpf",rule:"unique",message:"CPF já cadastrado"},{field:"cnh",rule:"unique",message:"CNH já cadastrada"}],transformations:[{field:"cpf",transform:"cleanNumeric"},{field:"celular",transform:"cleanNumeric"},{field:"cep",transform:"cleanNumeric"},{field:"nome",transform:"uppercase"},{field:"email",transform:"lowercase"}],templateConfig:{headers:["Nome*","CPF*","CNH*","Celular*","Email","CEP*","Número","Complemento","Endereço*","Cidade*","Função","CNH Vencimento","CNH Categoria","Tóxico Último Exame","Tóxico Vencimento","Data Admissão","Salário","Observação"],exampleData:[["JOÃO SILVA","11144477735","11144477735","11999999999","joao@email.com","01234567","123","Apto 45","Rua das Flores","São Paulo","outro","15/12/2025","E","15/01/2024","15/04/2024","01/01/2024","3500.00","Funcionário dedicado e pontual"],["MARIA SANTOS","52998224725","52998224725","11888888888","maria@email.com","01310100","1000","Sala 200","Av. Paulista","Chapecó","ajudante","20/10/2025","B","20/02/2024","20/05/2024","15/02/2024","2800.00","Ajudante experiente"]],instructions:["1. Preencha todos os campos marcados com *","2. CPF deve ter 11 dígitos (sistema adiciona zero à esquerda automaticamente se necessário)","3. CNH deve ser única no sistema","4. Celular deve ter 10 ou 11 dígitos","5. Email deve ser válido (opcional)","6. CEP deve ter 8 dígitos","7. Função: motorista, ajudante, outro, outros","8. Datas devem estar no formato DD/MM/AAAA","9. Salário deve ser numérico usando ponto decimal (ex: 3500.00)"],validations:["CPF deve ser único no sistema e ter 11 dígitos (sistema adiciona zero à esquerda automaticamente)","CNH deve ser único no sistema","Email deve ser único (se fornecido)","CEP deve ter 8 dígitos","Data de admissão deve ser válida","Salário deve ser numérico (aceita 3500.00 ou 3500,00)","CNH Vencimento deve ser uma data futura","Tóxico Vencimento deve ser uma data futura"]}}}async validateData(n){const e=[],a=[];try{const s=await M.listar(),r=new Set(s.map(t=>t.cpf)),m=new Set(s.map(t=>t.cnh));return n.forEach((t,c)=>{var l,d,u,f,p,h,S;const o=c+2;if((l=t[0])!=null&&l.toString().trim()||e.push({row:o,field:"Nome",message:"Nome é obrigatório"}),(d=t[1])!=null&&d.toString().trim()||e.push({row:o,field:"CPF",message:"CPF é obrigatório"}),(u=t[2])!=null&&u.toString().trim()||e.push({row:o,field:"CNH",message:"CNH é obrigatória"}),(f=t[3])!=null&&f.toString().trim()||e.push({row:o,field:"Celular",message:"Celular é obrigatório"}),(p=t[5])!=null&&p.toString().trim()||e.push({row:o,field:"CEP",message:"CEP é obrigatório"}),(h=t[8])!=null&&h.toString().trim()||e.push({row:o,field:"Endereço",message:"Endereço é obrigatório"}),(S=t[9])!=null&&S.toString().trim()||e.push({row:o,field:"Cidade",message:"Cidade é obrigatória"}),t[1]){const i=t[1].toString().replace(/\D/g,"");r.has(i)&&e.push({row:o,field:"CPF",message:`CPF "${t[1].toString().trim()}" já cadastrado no sistema`})}if(t[2]){const i=t[2].toString().replace(/\D/g,"");m.has(i)&&e.push({row:o,field:"CNH",message:`CNH "${t[2].toString().trim()}" já cadastrada no sistema`})}if(t[1]){const i=t[1].toString().replace(/\D/g,"");if(i.length===10){const C=t[1].toString().trim();t[1]="0"+i,a.push({row:o,field:"CPF",message:`CPF "${C}" foi corrigido para "${t[1]}" (zero à esquerda adicionado automaticamente)`})}else i.length!==11&&e.push({row:o,field:"CPF",message:`CPF "${t[1].toString().trim()}" deve ter 11 dígitos. Se o Excel removeu zeros à esquerda, adicione manualmente.`})}if(t[3]){const i=t[3].toString().replace(/\D/g,"").length;i!==10&&i!==11&&e.push({row:o,field:"Celular",message:`Celular "${t[3].toString().trim()}" deve ter 10 ou 11 dígitos`})}if(t[4]&&!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(t[4].toString())&&e.push({row:o,field:"Email",message:`Email "${t[4].toString().trim()}" inválido`}),t[5]&&t[5].toString().replace(/\D/g,"").length!==8&&e.push({row:o,field:"CEP",message:`CEP "${t[5].toString().trim()}" deve ter 8 dígitos`}),t[16]){const i=t[16].toString().trim();this.convertSalaryFormat(i)===i&&isNaN(parseFloat(i))&&e.push({row:o,field:"Salário",message:`Salário "${i}" deve ser um número válido (ex: 3500.00 ou 3500,00)`})}const g=["motorista","ajudante","outro","outros"];if(t[10]&&!g.includes(t[10].toString().toLowerCase())&&e.push({row:o,field:"Função",message:`Função "${t[10].toString().trim()}" inválida. Opções válidas: motorista, ajudante, outro, outros`}),t[11]){const i=t[11].toString().trim();!isNaN(parseFloat(i))&&i.includes(".")?e.push({row:o,field:"CNH Vencimento",message:`Campo CNH Vencimento contém valor numérico "${i}". Verifique se os dados estão na coluna correta.`}):this.isValidDate(i)||a.push({row:o,field:"CNH Vencimento",message:`Data de vencimento da CNH "${i}" não está no formato DD/MM/AAAA`})}if(t[13]){const i=t[13].toString().trim();!isNaN(parseFloat(i))&&i.includes(".")?e.push({row:o,field:"Tóxico Último Exame",message:`Campo Tóxico Último Exame contém valor numérico "${i}". Verifique se os dados estão na coluna correta.`}):this.isValidDate(i)||a.push({row:o,field:"Tóxico Último Exame",message:`Data do último exame toxicológico "${i}" não está no formato DD/MM/AAAA`})}if(t[14]){const i=t[14].toString().trim();!isNaN(parseFloat(i))&&i.includes(".")?e.push({row:o,field:"Tóxico Vencimento",message:`Campo Tóxico Vencimento contém valor numérico "${i}". Verifique se os dados estão na coluna correta.`}):this.isValidDate(i)||a.push({row:o,field:"Tóxico Vencimento",message:`Data de vencimento do exame toxicológico "${i}" não está no formato DD/MM/AAAA`})}if(t[15]){const i=t[15].toString().trim();!isNaN(parseFloat(i))&&i.includes(".")?e.push({row:o,field:"Data Admissão",message:`Campo Data Admissão contém valor numérico "${i}". Verifique se os dados estão na coluna correta.`}):this.isValidDate(i)||a.push({row:o,field:"Data Admissão",message:`Data de admissão "${i}" não está no formato DD/MM/AAAA`})}}),{isValid:e.length===0,errors:e,warnings:a}}catch{return n.forEach((r,m)=>{var c,o,g,l,d,u,f;const t=m+2;(c=r[0])!=null&&c.toString().trim()||e.push({row:t,field:"Nome",message:"Nome é obrigatório"}),(o=r[1])!=null&&o.toString().trim()||e.push({row:t,field:"CPF",message:"CPF é obrigatório"}),(g=r[2])!=null&&g.toString().trim()||e.push({row:t,field:"CNH",message:"CNH é obrigatória"}),(l=r[3])!=null&&l.toString().trim()||e.push({row:t,field:"Celular",message:"Celular é obrigatório"}),(d=r[5])!=null&&d.toString().trim()||e.push({row:t,field:"CEP",message:"CEP é obrigatório"}),(u=r[8])!=null&&u.toString().trim()||e.push({row:t,field:"Endereço",message:"Endereço é obrigatório"}),(f=r[9])!=null&&f.toString().trim()||e.push({row:t,field:"Cidade",message:"Cidade é obrigatória"})}),{isValid:e.length===0,errors:e,warnings:a}}}async transformData(n){return n.map((e,a)=>{var s,r,m,t,c,o,g,l,d,u,f,p,h,S,i,C,E,F,A,V;try{const $=((s=e[8])==null?void 0:s.toString().trim().toUpperCase())||"",y=((r=e[7])==null?void 0:r.toString().trim().toUpperCase())||"",P=((m=e[6])==null?void 0:m.toString().trim())||"";let x=$;P&&(x+=`, ${P}`),y&&(x+=` - ${y}`);let v=((t=e[1])==null?void 0:t.toString().trim())||"";if(v){const D=v.replace(/\D/g,"");D.length===10?v="0"+D:v=D}const N={nome:((c=e[0])==null?void 0:c.toString().trim().toUpperCase())||"",cpf:v,cnh:((o=e[2])==null?void 0:o.toString().trim())||"",celular:((g=e[3])==null?void 0:g.toString().trim())||"",email:((l=e[4])==null?void 0:l.toString().trim().toLowerCase())||"",cep:((d=e[5])==null?void 0:d.toString().trim())||"",numero:((u=e[6])==null?void 0:u.toString().trim())||"",complemento:((f=e[7])==null?void 0:f.toString().trim().toUpperCase())||"",endereco:x,cidade:((p=e[9])==null?void 0:p.toString().trim().toUpperCase())||"",funcao:((h=e[10])==null?void 0:h.toString().toLowerCase())||"motorista",cnhVencimento:this.convertDateToISO(((S=e[11])==null?void 0:S.toString().trim())||""),cnhCategoria:((i=e[12])==null?void 0:i.toString().trim().toUpperCase())||"",toxicoUltimoExame:this.convertDateToISO(((C=e[13])==null?void 0:C.toString().trim())||""),toxicoVencimento:this.convertDateToISO(((E=e[14])==null?void 0:E.toString().trim())||""),dataAdmissao:this.convertDateToISO(((F=e[15])==null?void 0:F.toString().trim())||""),salario:this.convertSalaryFormat(((A=e[16])==null?void 0:A.toString().trim())||""),observacao:((V=e[17])==null?void 0:V.toString().trim().toUpperCase())||"",status:"disponivel",tipoContrato:"integral",unidadeNegocio:"frigorifico",ativo:!0};return Object.keys(N).forEach(D=>{const b=D;N[b]===void 0&&(N[b]="")}),N}catch($){throw new Error(`Erro ao processar linha ${a+1}: ${$.message}`)}})}async saveToDatabase(n){const e=[];let a=0,s=0;for(const r of n)try{await M.criar(r),a++}catch(m){s++,e.push({row:a+s+1,field:"geral",message:`Erro ao salvar funcionário: ${m.message}`,value:r.nome,severity:"error"})}return{success:s===0,totalRows:n.length,importedRows:a,failedRows:s,errors:e,warnings:[],duration:0}}isValidDate(n){if(!n||n.trim()==="")return!1;const e=/^(\d{2})\/(\d{2})\/(\d{4})$/;if(!e.test(n))return!1;const[,a,s,r]=n.match(e),m=new Date(parseInt(r),parseInt(s)-1,parseInt(a));return m.getDate()===parseInt(a)&&m.getMonth()===parseInt(s)-1&&m.getFullYear()===parseInt(r)}convertDateToISO(n){if(!n)return"";if(n instanceof Date){const a=n.getDate().toString().padStart(2,"0"),s=(n.getMonth()+1).toString().padStart(2,"0");return`${n.getFullYear()}-${s}-${a}`}const e=n.toString();if(e.includes("GMT")||e.includes("UTC"))try{const a=e.match(/(\w{3})\s+(\w{3})\s+(\d{1,2})\s+(\d{4})/);if(a){const[,,r,m,t]=a,o={Jan:"01",Feb:"02",Mar:"03",Apr:"04",May:"05",Jun:"06",Jul:"07",Aug:"08",Sep:"09",Oct:"10",Nov:"11",Dec:"12"}[r];if(o)return`${t}-${o}-${m.padStart(2,"0")}`}const s=new Date(e);if(!isNaN(s.getTime())){const r=s.getDate().toString().padStart(2,"0"),m=(s.getMonth()+1).toString().padStart(2,"0");return`${s.getFullYear()}-${m}-${r}`}}catch{}if(this.isValidDate(e)){const a=/^(\d{2})\/(\d{2})\/(\d{4})$/,s=e.match(a);if(s){const[,r,m,t]=s;return`${t}-${m.padStart(2,"0")}-${r.padStart(2,"0")}`}}return""}convertSalaryFormat(n){if(!n||n.trim()==="")return"";let e=n.trim();e.includes(",")&&(e=e.replace(",","."));const a=parseFloat(e);return isNaN(a)?e:a.toString()}}export{O as FuncionariosImportService};
//# sourceMappingURL=funcionariosImportService-Djtnzf6c.js.map
