{"version":3,"file":"funcionariosImportService-Djtnzf6c.js","sources":["../../src/components/import/data/funcionariosImportService.ts"],"sourcesContent":["import { BaseImportService } from \"./importService\";\nimport { funcionariosService } from \"../../funcionarios/data/funcionariosService\";\nimport type { FuncionarioInput } from \"../../funcionarios/types\";\nimport type {\n  ImportConfig,\n  ValidationResult,\n  ImportResult,\n} from \"../types/importTypes\";\n\nexport class FuncionariosImportService extends BaseImportService {\n  protected config: ImportConfig = {\n    entityType: \"funcionarios\",\n    requiredFields: [\n      \"nome\",\n      \"cpf\",\n      \"cnh\",\n      \"celular\",\n      \"cep\",\n      \"endereco\",\n      \"cidade\",\n    ],\n    optionalFields: [\n      \"email\",\n      \"numero\",\n      \"complemento\",\n      \"funcao\",\n      \"cnhVencimento\",\n      \"cnhCategoria\",\n      \"toxicoUltimoExame\",\n      \"toxicoVencimento\",\n      \"dataAdmissao\",\n      \"salario\",\n      \"observacao\",\n      \"status\",\n      \"tipoContrato\",\n      \"unidadeNegocio\",\n    ],\n    validationRules: [\n      { field: \"cpf\", rule: \"cpf\", message: \"CPF inválido\" },\n      { field: \"cnh\", rule: \"required\", message: \"CNH obrigatória\" },\n      { field: \"celular\", rule: \"phone\", message: \"Celular inválido\" },\n      { field: \"email\", rule: \"email\", message: \"Email inválido\" },\n      { field: \"cpf\", rule: \"unique\", message: \"CPF já cadastrado\" },\n      { field: \"cnh\", rule: \"unique\", message: \"CNH já cadastrada\" },\n    ],\n    transformations: [\n      { field: \"cpf\", transform: \"cleanNumeric\" },\n      { field: \"celular\", transform: \"cleanNumeric\" },\n      { field: \"cep\", transform: \"cleanNumeric\" },\n      { field: \"nome\", transform: \"uppercase\" },\n      { field: \"email\", transform: \"lowercase\" },\n    ],\n    templateConfig: {\n      headers: [\n        \"Nome*\",\n        \"CPF*\",\n        \"CNH*\",\n        \"Celular*\",\n        \"Email\",\n        \"CEP*\",\n        \"Número\",\n        \"Complemento\",\n        \"Endereço*\",\n        \"Cidade*\",\n        \"Função\",\n        \"CNH Vencimento\",\n        \"CNH Categoria\",\n        \"Tóxico Último Exame\",\n        \"Tóxico Vencimento\",\n        \"Data Admissão\",\n        \"Salário\",\n        \"Observação\",\n      ],\n      exampleData: [\n        [\n          \"JOÃO SILVA\",\n          \"11144477735\",\n          \"11144477735\",\n          \"11999999999\",\n          \"joao@email.com\",\n          \"01234567\",\n          \"123\",\n          \"Apto 45\",\n          \"Rua das Flores\",\n          \"São Paulo\",\n          \"outro\",\n          \"15/12/2025\",\n          \"E\",\n          \"15/01/2024\",\n          \"15/04/2024\",\n          \"01/01/2024\",\n          \"3500.00\",\n          \"Funcionário dedicado e pontual\",\n        ],\n        [\n          \"MARIA SANTOS\",\n          \"52998224725\",\n          \"52998224725\",\n          \"11888888888\",\n          \"maria@email.com\",\n          \"01310100\",\n          \"1000\",\n          \"Sala 200\",\n          \"Av. Paulista\",\n          \"Chapecó\",\n          \"ajudante\",\n          \"20/10/2025\",\n          \"B\",\n          \"20/02/2024\",\n          \"20/05/2024\",\n          \"15/02/2024\",\n          \"2800.00\",\n          \"Ajudante experiente\",\n        ],\n      ],\n      instructions: [\n        \"1. Preencha todos os campos marcados com *\",\n        \"2. CPF deve ter 11 dígitos (sistema adiciona zero à esquerda automaticamente se necessário)\",\n        \"3. CNH deve ser única no sistema\",\n        \"4. Celular deve ter 10 ou 11 dígitos\",\n        \"5. Email deve ser válido (opcional)\",\n        \"6. CEP deve ter 8 dígitos\",\n        \"7. Função: motorista, ajudante, outro, outros\",\n        \"8. Datas devem estar no formato DD/MM/AAAA\",\n        \"9. Salário deve ser numérico usando ponto decimal (ex: 3500.00)\",\n      ],\n      validations: [\n        \"CPF deve ser único no sistema e ter 11 dígitos (sistema adiciona zero à esquerda automaticamente)\",\n        \"CNH deve ser único no sistema\",\n        \"Email deve ser único (se fornecido)\",\n        \"CEP deve ter 8 dígitos\",\n        \"Data de admissão deve ser válida\",\n        \"Salário deve ser numérico (aceita 3500.00 ou 3500,00)\",\n        \"CNH Vencimento deve ser uma data futura\",\n        \"Tóxico Vencimento deve ser uma data futura\",\n      ],\n    },\n  };\n\n  protected async validateData(data: any[]): Promise<ValidationResult> {\n    const errors: any[] = [];\n    const warnings: any[] = [];\n\n    try {\n      // Buscar dados existentes para validação de unicidade\n      const funcionariosExistentes = await funcionariosService.listar();\n      const cpfsExistentes = new Set(funcionariosExistentes.map((f) => f.cpf));\n      const cnhsExistentes = new Set(funcionariosExistentes.map((f) => f.cnh));\n\n      // Validar cada linha\n      data.forEach((row, index) => {\n        const rowNumber = index + 2; // +2 porque a primeira linha é cabeçalho\n\n        // Validação de campos obrigatórios\n        if (!row[0]?.toString().trim()) {\n          errors.push({\n            row: rowNumber,\n            field: \"Nome\",\n            message: \"Nome é obrigatório\",\n          });\n        }\n\n        if (!row[1]?.toString().trim()) {\n          errors.push({\n            row: rowNumber,\n            field: \"CPF\",\n            message: \"CPF é obrigatório\",\n          });\n        }\n\n        if (!row[2]?.toString().trim()) {\n          errors.push({\n            row: rowNumber,\n            field: \"CNH\",\n            message: \"CNH é obrigatória\",\n          });\n        }\n\n        if (!row[3]?.toString().trim()) {\n          errors.push({\n            row: rowNumber,\n            field: \"Celular\",\n            message: \"Celular é obrigatório\",\n          });\n        }\n\n        if (!row[5]?.toString().trim()) {\n          errors.push({\n            row: rowNumber,\n            field: \"CEP\",\n            message: \"CEP é obrigatório\",\n          });\n        }\n\n        // Complemento não é obrigatório - validação comentada\n        // if (!row[7]?.toString().trim()) {\n        //   errors.push({\n        //     row: rowNumber,\n        //     field: \"Complemento\",\n        //     message: \"Complemento é obrigatório\",\n        //   });\n        // }\n\n        if (!row[8]?.toString().trim()) {\n          errors.push({\n            row: rowNumber,\n            field: \"Endereço\",\n            message: \"Endereço é obrigatório\",\n          });\n        }\n\n        if (!row[9]?.toString().trim()) {\n          errors.push({\n            row: rowNumber,\n            field: \"Cidade\",\n            message: \"Cidade é obrigatória\",\n          });\n        }\n\n        // Validação de unicidade (CPF)\n        if (row[1]) {\n          const cpf = row[1].toString().replace(/\\D/g, \"\");\n          if (cpfsExistentes.has(cpf)) {\n            errors.push({\n              row: rowNumber,\n              field: \"CPF\",\n              message: `CPF \"${row[1].toString().trim()}\" já cadastrado no sistema`,\n            });\n          }\n        }\n\n        // Validação de unicidade (CNH)\n        if (row[2]) {\n          const cnh = row[2].toString().replace(/\\D/g, \"\");\n          if (cnhsExistentes.has(cnh)) {\n            errors.push({\n              row: rowNumber,\n              field: \"CNH\",\n              message: `CNH \"${row[2].toString().trim()}\" já cadastrada no sistema`,\n            });\n          }\n        }\n\n        // Validações específicas\n        // Validar formato de CPF (10 ou 11 dígitos)\n        if (row[1]) {\n          const cpfLimpo = row[1].toString().replace(/\\D/g, \"\");\n          if (cpfLimpo.length === 10) {\n            // Adicionar zero à esquerda se tiver 10 dígitos\n            const cpfOriginal = row[1].toString().trim();\n            row[1] = \"0\" + cpfLimpo;\n            warnings.push({\n              row: rowNumber,\n              field: \"CPF\",\n              message: `CPF \"${cpfOriginal}\" foi corrigido para \"${row[1]}\" (zero à esquerda adicionado automaticamente)`,\n            });\n          } else if (cpfLimpo.length !== 11) {\n            errors.push({\n              row: rowNumber,\n              field: \"CPF\",\n              message: `CPF \"${row[1].toString().trim()}\" deve ter 11 dígitos. Se o Excel removeu zeros à esquerda, adicione manualmente.`,\n            });\n          }\n        }\n\n        // Validar formato de celular (10 ou 11 dígitos)\n        if (row[3]) {\n          const celularLength = row[3].toString().replace(/\\D/g, \"\").length;\n          if (celularLength !== 10 && celularLength !== 11) {\n            errors.push({\n              row: rowNumber,\n              field: \"Celular\",\n              message: `Celular \"${row[3].toString().trim()}\" deve ter 10 ou 11 dígitos`,\n            });\n          }\n        }\n\n        // Validar email (se fornecido)\n        if (row[4] && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(row[4].toString())) {\n          errors.push({\n            row: rowNumber,\n            field: \"Email\",\n            message: `Email \"${row[4].toString().trim()}\" inválido`,\n          });\n        }\n\n        // Validar CEP (se fornecido)\n        if (row[5] && row[5].toString().replace(/\\D/g, \"\").length !== 8) {\n          errors.push({\n            row: rowNumber,\n            field: \"CEP\",\n            message: `CEP \"${row[5].toString().trim()}\" deve ter 8 dígitos`,\n          });\n        }\n\n        // Validar formato do salário (se fornecido)\n        if (row[16]) {\n          const salaryValue = row[16].toString().trim();\n          const convertedSalary = this.convertSalaryFormat(salaryValue);\n          if (\n            convertedSalary === salaryValue &&\n            isNaN(parseFloat(salaryValue))\n          ) {\n            errors.push({\n              row: rowNumber,\n              field: \"Salário\",\n              message: `Salário \"${salaryValue}\" deve ser um número válido (ex: 3500.00 ou 3500,00)`,\n            });\n          }\n        }\n\n        // Validar função\n        const funcoesValidas = [\"motorista\", \"ajudante\", \"outro\", \"outros\"];\n        if (\n          row[10] &&\n          !funcoesValidas.includes(row[10].toString().toLowerCase())\n        ) {\n          errors.push({\n            row: rowNumber,\n            field: \"Função\",\n            message: `Função \"${row[10].toString().trim()}\" inválida. Opções válidas: motorista, ajudante, outro, outros`,\n          });\n        }\n\n        // Validar formato de data (se fornecida)\n        if (row[11]) {\n          const cnhVencimento = row[11].toString().trim();\n          // Verificar se é um número (erro de mapeamento)\n          if (\n            !isNaN(parseFloat(cnhVencimento)) &&\n            cnhVencimento.includes(\".\")\n          ) {\n            errors.push({\n              row: rowNumber,\n              field: \"CNH Vencimento\",\n              message: `Campo CNH Vencimento contém valor numérico \"${cnhVencimento}\". Verifique se os dados estão na coluna correta.`,\n            });\n          } else if (!this.isValidDate(cnhVencimento)) {\n            warnings.push({\n              row: rowNumber,\n              field: \"CNH Vencimento\",\n              message: `Data de vencimento da CNH \"${cnhVencimento}\" não está no formato DD/MM/AAAA`,\n            });\n          }\n        }\n\n        if (row[13]) {\n          const toxicoUltimo = row[13].toString().trim();\n          if (!isNaN(parseFloat(toxicoUltimo)) && toxicoUltimo.includes(\".\")) {\n            errors.push({\n              row: rowNumber,\n              field: \"Tóxico Último Exame\",\n              message: `Campo Tóxico Último Exame contém valor numérico \"${toxicoUltimo}\". Verifique se os dados estão na coluna correta.`,\n            });\n          } else if (!this.isValidDate(toxicoUltimo)) {\n            warnings.push({\n              row: rowNumber,\n              field: \"Tóxico Último Exame\",\n              message: `Data do último exame toxicológico \"${toxicoUltimo}\" não está no formato DD/MM/AAAA`,\n            });\n          }\n        }\n\n        if (row[14]) {\n          const toxicoVenc = row[14].toString().trim();\n          if (!isNaN(parseFloat(toxicoVenc)) && toxicoVenc.includes(\".\")) {\n            errors.push({\n              row: rowNumber,\n              field: \"Tóxico Vencimento\",\n              message: `Campo Tóxico Vencimento contém valor numérico \"${toxicoVenc}\". Verifique se os dados estão na coluna correta.`,\n            });\n          } else if (!this.isValidDate(toxicoVenc)) {\n            warnings.push({\n              row: rowNumber,\n              field: \"Tóxico Vencimento\",\n              message: `Data de vencimento do exame toxicológico \"${toxicoVenc}\" não está no formato DD/MM/AAAA`,\n            });\n          }\n        }\n\n        if (row[15]) {\n          const dataAdmissao = row[15].toString().trim();\n          if (!isNaN(parseFloat(dataAdmissao)) && dataAdmissao.includes(\".\")) {\n            errors.push({\n              row: rowNumber,\n              field: \"Data Admissão\",\n              message: `Campo Data Admissão contém valor numérico \"${dataAdmissao}\". Verifique se os dados estão na coluna correta.`,\n            });\n          } else if (!this.isValidDate(dataAdmissao)) {\n            warnings.push({\n              row: rowNumber,\n              field: \"Data Admissão\",\n              message: `Data de admissão \"${dataAdmissao}\" não está no formato DD/MM/AAAA`,\n            });\n          }\n        }\n      });\n\n      return {\n        isValid: errors.length === 0,\n        errors,\n        warnings,\n      };\n    } catch (error) {\n      // Se houver erro ao buscar dados existentes, retornar apenas validação básica\n      data.forEach((row, index) => {\n        const rowNumber = index + 2;\n\n        if (!row[0]?.toString().trim()) {\n          errors.push({\n            row: rowNumber,\n            field: \"Nome\",\n            message: \"Nome é obrigatório\",\n          });\n        }\n\n        if (!row[1]?.toString().trim()) {\n          errors.push({\n            row: rowNumber,\n            field: \"CPF\",\n            message: \"CPF é obrigatório\",\n          });\n        }\n\n        if (!row[2]?.toString().trim()) {\n          errors.push({\n            row: rowNumber,\n            field: \"CNH\",\n            message: \"CNH é obrigatória\",\n          });\n        }\n\n        if (!row[3]?.toString().trim()) {\n          errors.push({\n            row: rowNumber,\n            field: \"Celular\",\n            message: \"Celular é obrigatório\",\n          });\n        }\n\n        if (!row[5]?.toString().trim()) {\n          errors.push({\n            row: rowNumber,\n            field: \"CEP\",\n            message: \"CEP é obrigatório\",\n          });\n        }\n\n        // Complemento não é obrigatório - validação comentada\n        // if (!row[7]?.toString().trim()) {\n        //   errors.push({\n        //     row: rowNumber,\n        //     field: \"Complemento\",\n        //     message: \"Complemento é obrigatório\",\n        //   });\n        // }\n\n        if (!row[8]?.toString().trim()) {\n          errors.push({\n            row: rowNumber,\n            field: \"Endereço\",\n            message: \"Endereço é obrigatório\",\n          });\n        }\n\n        if (!row[9]?.toString().trim()) {\n          errors.push({\n            row: rowNumber,\n            field: \"Cidade\",\n            message: \"Cidade é obrigatória\",\n          });\n        }\n      });\n\n      return {\n        isValid: errors.length === 0,\n        errors,\n        warnings,\n      };\n    }\n  }\n\n  protected async transformData(data: any[]): Promise<FuncionarioInput[]> {\n    return data.map((row, index) => {\n      try {\n        // Construir endereço completo combinando endereço e complemento\n        const enderecoBase = row[8]?.toString().trim().toUpperCase() || \"\";\n        const complemento = row[7]?.toString().trim().toUpperCase() || \"\";\n        const numero = row[6]?.toString().trim() || \"\";\n\n        let enderecoCompleto = enderecoBase;\n        if (numero) {\n          enderecoCompleto += `, ${numero}`;\n        }\n        if (complemento) {\n          enderecoCompleto += ` - ${complemento}`;\n        }\n\n        // Garantir que CPF tenha 11 dígitos\n        let cpfProcessado = row[1]?.toString().trim() || \"\";\n        if (cpfProcessado) {\n          const cpfLimpo = cpfProcessado.replace(/\\D/g, \"\");\n          if (cpfLimpo.length === 10) {\n            cpfProcessado = \"0\" + cpfLimpo;\n          } else {\n            cpfProcessado = cpfLimpo;\n          }\n        }\n\n        const funcionario: FuncionarioInput = {\n          nome: row[0]?.toString().trim().toUpperCase() || \"\",\n          cpf: cpfProcessado,\n          cnh: row[2]?.toString().trim() || \"\",\n          celular: row[3]?.toString().trim() || \"\",\n          email: row[4]?.toString().trim().toLowerCase() || \"\",\n          cep: row[5]?.toString().trim() || \"\",\n          numero: row[6]?.toString().trim() || \"\",\n          complemento: row[7]?.toString().trim().toUpperCase() || \"\",\n          endereco: enderecoCompleto,\n          cidade: row[9]?.toString().trim().toUpperCase() || \"\",\n          funcao: (row[10]?.toString().toLowerCase() as any) || \"motorista\",\n          cnhVencimento: this.convertDateToISO(\n            row[11]?.toString().trim() || \"\",\n          ),\n          cnhCategoria: row[12]?.toString().trim().toUpperCase() || \"\",\n          toxicoUltimoExame: this.convertDateToISO(\n            row[13]?.toString().trim() || \"\",\n          ),\n          toxicoVencimento: this.convertDateToISO(\n            row[14]?.toString().trim() || \"\",\n          ),\n          dataAdmissao: this.convertDateToISO(row[15]?.toString().trim() || \"\"),\n          salario: this.convertSalaryFormat(row[16]?.toString().trim() || \"\"),\n          observacao: row[17]?.toString().trim().toUpperCase() || \"\",\n          status: \"disponivel\",\n          tipoContrato: \"integral\",\n          unidadeNegocio: \"frigorifico\",\n          ativo: true,\n        };\n\n        // Remover campos undefined para evitar erro no Firebase\n        Object.keys(funcionario).forEach((key) => {\n          const fieldKey = key as keyof FuncionarioInput;\n          if (funcionario[fieldKey] === undefined) {\n            (funcionario as any)[fieldKey] = \"\";\n          }\n        });\n\n        return funcionario;\n      } catch (error) {\n        throw new Error(\n          `Erro ao processar linha ${index + 1}: ${error.message}`,\n        );\n      }\n    });\n  }\n\n  protected async saveToDatabase(data: any[]): Promise<ImportResult> {\n    const errors: any[] = [];\n    let importedRows = 0;\n    let failedRows = 0;\n\n    for (const item of data) {\n      try {\n        await funcionariosService.criar(item);\n        importedRows++;\n      } catch (error) {\n        failedRows++;\n        errors.push({\n          row: importedRows + failedRows + 1,\n          field: \"geral\",\n          message: `Erro ao salvar funcionário: ${error.message}`,\n          value: item.nome,\n          severity: \"error\",\n        });\n      }\n    }\n\n    return {\n      success: failedRows === 0,\n      totalRows: data.length,\n      importedRows,\n      failedRows,\n      errors,\n      warnings: [],\n      duration: 0,\n    };\n  }\n\n  private isValidDate(dateString: string): boolean {\n    if (!dateString || dateString.trim() === \"\") return false;\n\n    const dateRegex = /^(\\d{2})\\/(\\d{2})\\/(\\d{4})$/;\n    if (!dateRegex.test(dateString)) return false;\n\n    const [, day, month, year] = dateString.match(dateRegex)!;\n    const date = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));\n\n    return (\n      date.getDate() === parseInt(day) &&\n      date.getMonth() === parseInt(month) - 1 &&\n      date.getFullYear() === parseInt(year)\n    );\n  }\n\n  private convertDateToISO(dateString: any): string {\n    if (!dateString) {\n      return \"\";\n    }\n\n    // Se for um objeto Date, converter para string\n    if (dateString instanceof Date) {\n      const day = dateString.getDate().toString().padStart(2, \"0\");\n      const month = (dateString.getMonth() + 1).toString().padStart(2, \"0\");\n      const year = dateString.getFullYear();\n      return `${year}-${month}-${day}`;\n    }\n\n    const dateStr = dateString.toString();\n\n    // Tentar converter string de data JavaScript para Date\n    if (dateStr.includes(\"GMT\") || dateStr.includes(\"UTC\")) {\n      try {\n        // Extrair a data da string JavaScript (ex: \"Tue Aug 26 2025 21:00:00 GMT-0300\")\n        // Usar regex para extrair dia, mês e ano\n        const dateMatch = dateStr.match(\n          /(\\w{3})\\s+(\\w{3})\\s+(\\d{1,2})\\s+(\\d{4})/,\n        );\n        if (dateMatch) {\n          const [, , monthName, day, year] = dateMatch;\n          const monthMap: { [key: string]: string } = {\n            Jan: \"01\",\n            Feb: \"02\",\n            Mar: \"03\",\n            Apr: \"04\",\n            May: \"05\",\n            Jun: \"06\",\n            Jul: \"07\",\n            Aug: \"08\",\n            Sep: \"09\",\n            Oct: \"10\",\n            Nov: \"11\",\n            Dec: \"12\",\n          };\n          const month = monthMap[monthName];\n          if (month) {\n            return `${year}-${month}-${day.padStart(2, \"0\")}`;\n          }\n        }\n\n        // Fallback: tentar criar Date e usar métodos locais\n        const dateObj = new Date(dateStr);\n        if (!isNaN(dateObj.getTime())) {\n          const day = dateObj.getDate().toString().padStart(2, \"0\");\n          const month = (dateObj.getMonth() + 1).toString().padStart(2, \"0\");\n          const year = dateObj.getFullYear();\n          return `${year}-${month}-${day}`;\n        }\n      } catch (error) {\n        // Ignorar erro e tentar outros formatos\n      }\n    }\n\n    // Se for string no formato DD/MM/AAAA, validar e converter\n    if (this.isValidDate(dateStr)) {\n      const dateRegex = /^(\\d{2})\\/(\\d{2})\\/(\\d{4})$/;\n      const match = dateStr.match(dateRegex);\n\n      if (match) {\n        const [, day, month, year] = match;\n        return `${year}-${month.padStart(2, \"0\")}-${day.padStart(2, \"0\")}`;\n      }\n    }\n\n    return \"\";\n  }\n\n  private convertSalaryFormat(salaryString: string): string {\n    if (!salaryString || salaryString.trim() === \"\") return \"\";\n\n    // Remover espaços\n    let salary = salaryString.trim();\n\n    // Se contém vírgula, converter para ponto decimal\n    if (salary.includes(\",\")) {\n      // Substituir vírgula por ponto\n      salary = salary.replace(\",\", \".\");\n    }\n\n    // Validar se é um número válido\n    const numericValue = parseFloat(salary);\n    if (isNaN(numericValue)) {\n      return salary; // Retorna o valor original se não for numérico\n    }\n\n    // Retornar como string com ponto decimal\n    return numericValue.toString();\n  }\n}\n"],"names":["FuncionariosImportService","BaseImportService","data","errors","warnings","funcionariosExistentes","funcionariosService","cpfsExistentes","f","cnhsExistentes","row","index","rowNumber","_a","_b","_c","_d","_e","_f","_g","cpf","cnh","cpfLimpo","cpfOriginal","celularLength","salaryValue","funcoesValidas","cnhVencimento","toxicoUltimo","toxicoVenc","dataAdmissao","enderecoBase","complemento","numero","enderecoCompleto","cpfProcessado","funcionario","_h","_i","_j","_k","_l","_m","_n","_o","_p","_q","_r","_s","_t","key","fieldKey","error","importedRows","failedRows","item","dateString","dateRegex","day","month","year","date","dateStr","dateMatch","monthName","dateObj","match","salaryString","salary","numericValue"],"mappings":"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"}