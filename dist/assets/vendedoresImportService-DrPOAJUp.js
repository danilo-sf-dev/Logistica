import{B as N,v as E}from"./index-GRtTAizn.js";class R extends N{constructor(){super(...arguments),this.config={entityType:"vendedores",requiredFields:["nome","cpf","celular","regiao","unidadeNegocio","tipoContrato"],optionalFields:["email","codigoVendSistema","cidadesAtendidas"],validationRules:[{field:"nome",rule:"required",message:"Nome é obrigatório"},{field:"cpf",rule:"required",message:"CPF é obrigatório"},{field:"cpf",rule:"cpf",message:"CPF inválido"},{field:"celular",rule:"required",message:"Celular é obrigatório"},{field:"celular",rule:"phone",message:"Celular inválido"},{field:"regiao",rule:"required",message:"Região é obrigatória"},{field:"unidadeNegocio",rule:"required",message:"Unidade de Negócio é obrigatória"},{field:"tipoContrato",rule:"required",message:"Tipo de Contrato é obrigatório"},{field:"email",rule:"email",message:"Email inválido"}],transformations:[{field:"nome",transform:"uppercase"},{field:"cpf",transform:"cleanNumeric"},{field:"celular",transform:"cleanNumeric"},{field:"regiao",transform:"uppercase"},{field:"email",transform:"lowercase"},{field:"codigoVendSistema",transform:"uppercase"}],templateConfig:{headers:["Nome*","CPF*","Email","Celular*","Região*","Código Sistema","Unidade Negócio*","Tipo Contrato*","Cidades Atendidas"],exampleData:[["JOÃO SILVA","12345678901","joao@empresa.com","11999999999","SUDESTE","VEND001","frigorifico","clt","São Paulo,Rio de Janeiro"],["MARIA SANTOS","98765432100","maria@empresa.com","11888888888","NORDESTE","VEND002","ovos","pj","Salvador,Ilhéus"]],instructions:["1. Preencha todos os campos marcados com *","2. CPF deve ter 11 dígitos sem pontos ou traços e ser válido","3. Celular deve ter 10 ou 11 dígitos","4. Email deve ser válido (opcional)","5. Região: SUDESTE, NORDESTE, SUL, NORTE, CENTRO-OESTE","6. Unidade Negócio: frigorifico, ovos, ambos","7. Tipo Contrato: clt, pj, autonomo, outro","8. Cidades Atendidas: separadas por vírgula (opcional)"],validations:["CPF deve ser único no sistema e válido","Email deve ser único (se fornecido)","Código do Sistema deve ser único (se fornecido)","Região deve ser uma das opções válidas","Unidade de Negócio deve ser uma das opções válidas","Tipo de Contrato deve ser uma das opções válidas"]}}}async validateData(l){const i=[],s=[];try{const t=await E.listar(),a=new Set(t.map(e=>e.cpf)),d=new Set(t.filter(e=>e.email).map(e=>e.email)),r=new Set(t.filter(e=>e.codigoVendSistema).map(e=>e.codigoVendSistema));return l.forEach((e,g)=>{var u,p,S,v,C,h;const o=g+2;if((u=e[0])!=null&&u.toString().trim()||i.push({row:o,field:"nome",message:"Nome é obrigatório"}),(p=e[1])!=null&&p.toString().trim()||i.push({row:o,field:"cpf",message:"CPF é obrigatório"}),(S=e[3])!=null&&S.toString().trim()||i.push({row:o,field:"celular",message:"Celular é obrigatório"}),(v=e[4])!=null&&v.toString().trim()||i.push({row:o,field:"regiao",message:"Região é obrigatória"}),(C=e[6])!=null&&C.toString().trim()||i.push({row:o,field:"unidadeNegocio",message:"Unidade de negócio é obrigatória"}),(h=e[7])!=null&&h.toString().trim()||i.push({row:o,field:"tipoContrato",message:"Tipo de contrato é obrigatório"}),e[1]){const m=e[1].toString().replace(/\D/g,"");a.has(m)&&i.push({row:o,field:"cpf",message:`CPF "${e[1].toString().trim()}" já cadastrado no sistema`})}if(e[2]&&d.has(e[2].toString().toLowerCase())&&i.push({row:o,field:"email",message:`Email "${e[2].toString().trim()}" já cadastrado no sistema`}),e[5]&&r.has(e[5].toString())&&i.push({row:o,field:"codigoVendSistema",message:`Código "${e[5].toString().trim()}" já cadastrado no sistema`}),e[1]&&e[1].toString().replace(/\D/g,"").length!==11&&i.push({row:o,field:"cpf",message:"CPF deve ter exatamente 11 dígitos",value:e[1],severity:"error"}),e[3]){const m=e[3].toString().replace(/\D/g,"").length;m!==10&&m!==11&&i.push({row:o,field:"celular",message:"Celular deve ter 10 ou 11 dígitos",value:e[3],severity:"error"})}e[2]&&!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e[2].toString())&&i.push({row:o,field:"email",message:"Email inválido",value:e[2],severity:"error"});const n=["SUDESTE","NORDESTE","SUL","NORTE","CENTRO-OESTE"];e[4]&&!n.includes(e[4].toString().toUpperCase())&&i.push({row:o,field:"regiao",message:`Região inválida. Opções válidas: ${n.join(", ")}`,value:e[4],severity:"error"});const c=["frigorifico","ovos","ambos"];e[6]&&!c.includes(e[6].toString().toLowerCase())&&i.push({row:o,field:"unidadeNegocio",message:`Unidade de negócio inválida. Opções válidas: ${c.join(", ")}`,value:e[6],severity:"error"});const f=["clt","pj","autonomo","outro"];if(e[7]&&!f.includes(e[7].toString().toLowerCase())&&i.push({row:o,field:"tipoContrato",message:`Tipo de contrato inválido. Opções válidas: ${f.join(", ")}`,value:e[7],severity:"error"}),e[5]){const m=parseInt(e[5].toString());(isNaN(m)||m<0)&&i.push({row:o,field:"codigoVendSistema",message:"Código deve ser um número inteiro positivo",value:e[5],severity:"error"})}e[5]&&r.has(e[5].toString().toUpperCase())&&i.push({row:o,field:"codigoVendSistema",message:"Código do Sistema já cadastrado",value:e[5],severity:"error"})}),{isValid:i.length===0,errors:i,warnings:s}}catch{return l.forEach((a,d)=>{var e,g,o,n,c,f;const r=d+2;(e=a[0])!=null&&e.toString().trim()||i.push({row:r,field:"nome",message:"Nome é obrigatório"}),(g=a[1])!=null&&g.toString().trim()||i.push({row:r,field:"cpf",message:"CPF é obrigatório"}),(o=a[3])!=null&&o.toString().trim()||i.push({row:r,field:"celular",message:"Celular é obrigatório"}),(n=a[4])!=null&&n.toString().trim()||i.push({row:r,field:"regiao",message:"Região é obrigatória"}),(c=a[6])!=null&&c.toString().trim()||i.push({row:r,field:"unidadeNegocio",message:"Unidade de negócio é obrigatória"}),(f=a[7])!=null&&f.toString().trim()||i.push({row:r,field:"tipoContrato",message:"Tipo de contrato é obrigatório"})}),{isValid:i.length===0,errors:i,warnings:s}}}async transformData(l){return l.map(i=>{var t,a,d,r,e,g;const s={nome:((t=i[0])==null?void 0:t.toString().toUpperCase())||"",cpf:((a=i[1])==null?void 0:a.toString().replace(/\D/g,""))||"",celular:((d=i[3])==null?void 0:d.toString().replace(/\D/g,""))||"",regiao:((r=i[4])==null?void 0:r.toString().toUpperCase())||"",unidadeNegocio:((e=i[6])==null?void 0:e.toString().toLowerCase())||"frigorifico",tipoContrato:((g=i[7])==null?void 0:g.toString().toLowerCase())||"clt",ativo:!0};if(i[2]&&(s.email=i[2].toString().toLowerCase()),i[5]&&(s.codigoVendSistema=i[5].toString().toUpperCase()),i[8]){const o=i[8].toString().split(",").map(n=>n.trim()).filter(n=>n.length>0);o.length>0&&(s.cidadesAtendidas=o)}return s})}async saveToDatabase(l){const i=Date.now();let s=0,t=0;const a=[];for(const d of l)try{await E.criar(d),s++}catch(r){t++,a.push({row:s+t+1,field:"geral",message:`Erro ao salvar vendedor: ${r.message}`,value:d.nome,severity:"error"})}return{success:t===0,totalRows:l.length,importedRows:s,failedRows:t,errors:a,warnings:[],duration:Date.now()-i}}}export{R as VendedoresImportService};
//# sourceMappingURL=vendedoresImportService-DrPOAJUp.js.map
